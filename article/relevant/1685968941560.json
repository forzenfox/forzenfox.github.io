{"relevantArticles":[{"articleTitle":"JVM 学习笔记 - String","articleAbstractText":"String 基本特性   定义方式 1String s1 = \"字面量定义\"; //字符串 \"字面量定义\" String对象直接进入字符串常量池中 2String s2 = new String(\"构造器构造\");    final 修饰，不可继承   实现 Serializable、Comparable 接口，支持序列化和可以比较大小   底层结构  jdk 8：final char [] value 存储数据 jdk 9：final byte[] value 存储数据    字符串的不可变性   内存结构  1public class StringTest {  2  3 public static void main(String[] args) {  4 /*  5 对象1：new String对象  6 对象2：常量池中对象 \"abc\"，对应字节码指令 'ldc'  7 */  8 String s = new String(\"abc\");  9 10 /* 11 对象1：new StringBuilder() 12 对象2：new String()对象 13 对象3：常量....","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139148432.html","articleImg1URL":"https://b3logfile.com/bing/20210416.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Spring Framework 学习笔记 - IoC 依赖注入","articleAbstractText":"依赖注入的模式和类型   自动绑定 (Autowiring)  自动绑定的限制和不足  Core Technologies (spring.io)  Setter 方法注入  构造器注入  字段注入  方法注入  接口回调注入   Aware 系列接口回调   自动模式    內建接口 说明     BeanFactoryAware 获取 IoC 容器 - BeanFactory   ApplicationContextAware 获取 Spring 应用上下文 - ApplicationContext 对象   EnvironmentAware 获取 Environment 对象   ResourceLoaderAware 获取资源加载器 对象 - ResourceLoad   BeanClassLoaderAware 获取加载当前 Bean Class 的 ClassLoader   BeanNameAware 获取当前 Bean 的名称   MessageSourceAware 获取 MessageSource 对象，用于 Spring 国际化   ApplicationEven....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969463102.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Spring Framework 学习笔记 - IoC 依赖来源","articleAbstractText":"依赖查找的来源 查找来源  Spring 內建 BeanDefintion  Spring 內建单例对象  依赖注入的来源 注入来源  Spring 容器管理和游离对象(Resolvable Dependency)  Spring BeanDefinition 作为依赖   元数据  BeanDefinition 存储元信息    注册  BeanDefinitionRegistry#registerBeanDefinition    类型  延迟和非延迟    顺序  Bean 生命周期顺序按照注册顺序 1// Still in startup registration phase 2this.beanDefinitionMap.put(beanName, beanDefinition); 3this.beanDefinitionNames.add(beanName);  源码中,通过 Map 结构保证唯一性, List 结构保证有序性    单例对象作为依赖来源   来源  外部普通 Java 对象 (不一定是 POJO )    注册  SingletonBeanRegistry....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969400518.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Spring Framework 学习笔记 - IoC 依赖查找","articleAbstractText":"Java 原生依赖查找   单一类型依赖查找   JNDI  javax.naming.Context#lookup(javax.naming.Name)    JavaBean  java.beans.beancontext.BeanContext      集合类型依赖查找  java.beans.beancontext.BeanContextServices#getCurrentServiceSelectors    层次性依赖查找  java.beans.beancontext.BeanContext    Spring IoC 依赖查找 单一类型依赖查找 单一类型依赖查找接口：  org.springframework.beans.factory.BeanFactory    根据 Bean 名称查找  org.springframework.beans.factory.BeanFactory#getBean(java.lang.String) org.springframework.beans.factory.BeanFactory#getBean(java.lang.St....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969358725.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"JVM 学习笔记 - 垃圾回收器","articleAbstractText":"垃圾回收器的分类 按线程数分   串行垃圾回收器  适用于单 CPU 或者较小内存的硬件平台 在 Client 模式下的默认回收器    并行垃圾回收器  适用于多 CPU 同时执行垃圾回收，提升应用吞吐量    按工作模式分   并发式垃圾回收器  回收线程与应用程序交替工作，尽可能减少应用程序的停顿时间    独占式垃圾回收器 - STW  一旦运行，暂停用户线程，直到垃圾回收过程完全结束    按碎片处理方式分   压缩式垃圾回收器  在回收完成之后，对存活对象进行压缩整理，消除内存碎片 对象空间分配方式：指针碰撞    非压缩式垃圾回收器  无压缩整理过程 对象空间分配方式：空闲列表    按工作的内存区间分  年轻代垃圾回收器  Serial ParNew Parallel Scavenge   老年代垃圾回收器  Serial Old Parallel Old CMS   整堆垃圾回收期  G1     评估 GC 的性能指标   吞吐量：用户线程运行时间占总运行时间的比例 吞吐量 = 用户线程运行时间 / 用户线程运行时间 + 垃圾回收线程运行时间   暂停时间：执行垃圾....","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139215959.html","articleImg1URL":"https://b3logfile.com/bing/20210218.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}