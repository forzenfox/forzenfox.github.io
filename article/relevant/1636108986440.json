{"relevantArticles":[{"articleTitle":"MySQL 学习笔记 - 性能分析","articleAbstractText":"系统性能参数 1SHOW [GLOBAL|SESSION] STATUS LIKE '{性能参数}';   统计最近一次 SQL 查询成本 1show status like 'last_query_cost';  定位执行慢的 SQL: 慢查询日志 执行慢的 SQL : 运行时间超过 long_query_time 值的 SQL。long_query_time 默认值为 10(秒)。 开启慢查询日志 非调优需要，不建议开启慢查询日志 查询慢查询日志是否打开 1show variables like '%slow_query_log';  打开慢查询日志 1set global slow_query_log = on;  查询慢查询日志文件地址 1show variables like '%slow_query_log_file';  修改 long_query_time 阈值 查询 long_query_time 阈值 1show variables like '%long_query_time';  修改 long_query_time 阈值 1set global long_qu....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685968215798.html","articleImg1URL":"https://b3logfile.com/bing/20180309.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"MySQL 学习笔记 - InnoDB 的存储结构","articleAbstractText":"页 按类型划分  数据页 系统页 Undo 页 事务数据页  页结构   默认大小 16KB     区  尽量把 随机磁盘读取 -&gt; 顺序磁盘读取，提高范围查询时的性能  一个区 = 64 个页 (16 KB * 64 = 1 MB) 段  段是一个逻辑概念，由若干个零散的页面 + 一些完整的区组成   叶子节点段 非叶子节点段 数据段 索引段 回滚段  碎片区  直属表空间，碎片区中的页可用于不同的目的  表空间 系统表空间 独立表空间","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685968363446.html","articleImg1URL":"https://b3logfile.com/bing/20180827.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"MySQL 学习笔记 - MVCC","articleAbstractText":"相关概念 多版本并发控制(Multiversion Concurrency Control) MVCC，多版本并发控制。通过数据行的多个版本管理来实现数据库的 并发控制。使用乐观锁保证 InnoDB 的事务隔离级别下的 一致性读。 快照读 快照读又叫一致性读，读取的是快照数据。不加锁的简单 select 语句都属于快照读  串行化 隔离级别下 快照读 会退化为当前读 （串行化之后，默认读的都是最新数据）  当前读 当前读读取的是记录的最新版本，读取时话要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。 加锁的 select，或者对数据进行增删改都会进行当前读 1select * from student lock in share mode; # S 锁 2select * from student for update; # X 锁 3insert into student values ... ; # X 锁 4update student set ... ; # X 锁 5delete from student where ... ; # X 锁  MVCC 的实现原理....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685968433040.html","articleImg1URL":"https://b3logfile.com/bing/20180210.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"MySQL 学习笔记 - 主从复制","articleAbstractText":"作用  读写分离  针对读多写少的需求，降低单机压力，同时减少锁表概率，从而实现更高的并发访问      数据备份 高可用  原理 Slave 从 Master 读取 binlog 实现数据同步","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685968286672.html","articleImg1URL":"https://b3logfile.com/bing/20180309.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"MySQL 学习笔记 - 锁","articleAbstractText":"锁的分类 按数据操作类型划分：读锁、写锁  读锁：共享锁（Shared Lock）S 锁 写锁：排他锁（Exclusive Lock）X 锁      X 锁 S 锁     X 锁 不兼容 不兼容   S 锁 不兼容 兼容    锁定读   对读取记录加 S 锁 1select ... lock in share mode; 2# 或者 3select ... for share; #（8.0新增语法）    对读取记录加 X 锁 1select ... for update;    Mysql 8.0 新特性 1select ... for share nowait; # 如果查询的行已经加锁，立即报错返回 2select ... fro share skip locked; # 如果查询的行已经加锁，只返回未锁定的行 3 4# for update （X 锁） 同上  写操作   delete  获取行记录的 X 锁，执行 delete mark 操作。    update   未修改键值，并且被更新列占用的存储空间大小未发生变化  获取行记录的 X 锁，执行更新操作    未修....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685968168813.html","articleImg1URL":"https://b3logfile.com/bing/20210221.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}