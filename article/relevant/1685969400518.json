{"relevantArticles":[{"articleTitle":"Spring Framework 学习笔记 - IoC 依赖查找","articleAbstractText":"Java 原生依赖查找   单一类型依赖查找   JNDI  javax.naming.Context#lookup(javax.naming.Name)    JavaBean  java.beans.beancontext.BeanContext      集合类型依赖查找  java.beans.beancontext.BeanContextServices#getCurrentServiceSelectors    层次性依赖查找  java.beans.beancontext.BeanContext    Spring IoC 依赖查找 单一类型依赖查找 单一类型依赖查找接口：  org.springframework.beans.factory.BeanFactory    根据 Bean 名称查找  org.springframework.beans.factory.BeanFactory#getBean(java.lang.String) org.springframework.beans.factory.BeanFactory#getBean(java.lang.St....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969358725.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Spring Framework 学习笔记 - IoC 依赖注入","articleAbstractText":"依赖注入的模式和类型   自动绑定 (Autowiring)  自动绑定的限制和不足  Core Technologies (spring.io)  Setter 方法注入  构造器注入  字段注入  方法注入  接口回调注入   Aware 系列接口回调   自动模式    內建接口 说明     BeanFactoryAware 获取 IoC 容器 - BeanFactory   ApplicationContextAware 获取 Spring 应用上下文 - ApplicationContext 对象   EnvironmentAware 获取 Environment 对象   ResourceLoaderAware 获取资源加载器 对象 - ResourceLoad   BeanClassLoaderAware 获取加载当前 Bean Class 的 ClassLoader   BeanNameAware 获取当前 Bean 的名称   MessageSourceAware 获取 MessageSource 对象，用于 Spring 国际化   ApplicationEven....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969463102.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"JVM 学习笔记 - 垃圾回收器","articleAbstractText":"垃圾回收器的分类 按线程数分   串行垃圾回收器  适用于单 CPU 或者较小内存的硬件平台 在 Client 模式下的默认回收器    并行垃圾回收器  适用于多 CPU 同时执行垃圾回收，提升应用吞吐量    按工作模式分   并发式垃圾回收器  回收线程与应用程序交替工作，尽可能减少应用程序的停顿时间    独占式垃圾回收器 - STW  一旦运行，暂停用户线程，直到垃圾回收过程完全结束    按碎片处理方式分   压缩式垃圾回收器  在回收完成之后，对存活对象进行压缩整理，消除内存碎片 对象空间分配方式：指针碰撞    非压缩式垃圾回收器  无压缩整理过程 对象空间分配方式：空闲列表    按工作的内存区间分  年轻代垃圾回收器  Serial ParNew Parallel Scavenge   老年代垃圾回收器  Serial Old Parallel Old CMS   整堆垃圾回收期  G1     评估 GC 的性能指标   吞吐量：用户线程运行时间占总运行时间的比例 吞吐量 = 用户线程运行时间 / 用户线程运行时间 + 垃圾回收线程运行时间   暂停时间：执行垃圾....","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139215959.html","articleImg1URL":"https://b3logfile.com/bing/20210218.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Spring Framework 学习笔记 - 注解","articleAbstractText":"Spring 核心注解场景分类 Spring 模式注解    Spring 注解 场景说明 起始版本     @Repository 数据仓储模式注解 2.0   @Component 通用组件模式注解 2.5   @Service 服务模式注解 2.5   @Controller Web 控制器模式注解 2.5   @Configuration 配置类模式注解 3.0    装配注解    Spring 注解 场景说明 起始版本     @ImportResource 替换 XML 元素 2.5   @Import 导入 Configuration 类 2.5   @ComponentScan 扫描指定 package 下标注 Spring 模式注解的类 3.1     @ComponentScan 默认扫描 当前类所在的包 源码分析如下：ComponentScanAnnotationParser.parse (line:123) 1public Set&lt;BeanDefinitionHolder&gt; parse(AnnotationAttributes componentS....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969491723.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"JVM 学习笔记 - 直接内存","articleAbstractText":"概述   不是虚拟机运行时数据区的一部分，也不是 《Java 虚拟机规范》 中定义的内存区域。   直接内存是在 Java 堆外的、直接向系统申请的内存区间。  来源于 NIO ，通过 DirectByteBuffer 操作本地内存    直接内存的访问速度优于 Java 堆。（读写性能高）     不受最大堆内存参数（-Xmx）的影响，但是 Java 堆 + 直接内存 受限于操作系统能给出的最大内存    也会出现 OOM 1java.lang.OutOfMemoryError: Direct buffer memory    MaxDirectMemorySize 设置直接内存大小，不设置时默认与 \u2014Xmx 的值相同 1-XX:MaxDirectMemorySize=20m       缺点：  分配收回成本高 不受 JVM 内存回收管理  Java 进程占用的内存 = Java 堆 + 本地内存","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139087173.html","articleImg1URL":"https://b3logfile.com/bing/20200325.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}