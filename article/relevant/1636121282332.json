{"relevantArticles":[{"articleTitle":"Java 8 - CompletableFuture","articleAbstractText":"构建 CompletableFuture 直接返回计算结果 CompletableFuture.completedFuture 是一个静态辅助方法，用来返回一个已经计算好的 CompletableFuture。 1public static &lt;U&gt; CompletableFuture&lt;U&gt; completedFuture(U value) { 2 return new CompletableFuture&lt;U&gt;((value == null) ? NIL : value); 3}  示例代码： 1 /** 2 * 构建一个直接返回结果结果的 CompletableFuture 3 */ 4 @Test 5 public void test_create_completableFuture() { 6 CompletableFuture&lt;String&gt; strFuture = CompletableFuture.completedFuture(\"我是字符串\"); 7 System.out.println(\"strFuture 计算结果：\" +....","articleStatus":0,"articlePermalink":"/articles/2022/04/26/1650947125974.html","articleImg1URL":"https://b3logfile.com/bing/20180105.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Spring Framework 学习笔记 - Spring 应用上下文生命周期","articleAbstractText":"Spring 应用上下文启动准备阶段 AbstractApplicationContext#prepareRefresh() 方法  启动时间 - startupDate **状态标识 - closed(false)、active(true) ** 初始化 PropertySources - initPropertySources()  默认实现为空：org.springframework.context.support.AbstractApplicationContext#initPropertySources   检验 Environment 中必须属性  ConfigurablePropertyResolver#setRequiredProperties   初始化事件监听器集合 初始化早期 Spring 事件集合  BeanFactory 创建阶段 AbstractApplicationContext#obtainFreshBeanFactory() 方法   刷新 Spring 应用上下文底层 BeanFactory  org.springframework.context.....","articleStatus":0,"articlePermalink":"/articles/2022/04/02/1648886248605.html","articleImg1URL":"https://b3logfile.com/bing/20201128.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"java 并发编程学习笔记","articleAbstractText":"java 并发编程学习笔记 进程和线程 进程  应用程序在内存中分配的空间，也就是正在运行的程序 各个进程互不干扰  线程  一个进程可以包含多个线程,每个线程单独负责一个子任务  java中的线程：   线程的优先级范围：0-10 优先级不能决定线程的执行顺序，只是给操作系统的建议，实际的执行顺序由操作系统的调度算法决定   为什么使用多线程实现并发,不使用多进程   进程重量级,开销比线程大 线程间通信容易,进程间通信困难   进程和线程的区别  本质区别: 是否独占内存地址空间和其他的系统资源 进程独占内存地址空间和系统资源,因此:  各个进程间数据隔离,数据共享困难但是同步简单. 创建/销毁进程开销大: 保存寄存器和栈信息,并且需要资源的分配和回收以及页调度. 独占内存,单个进程崩溃不影响其他进程,可靠性高  线程共享所属进程的内存地址空间和资源,因此:  各个线程间数据共享,数据共享容易但是同步困难. 创建/销毁线程开销小:保存寄存器和栈信息 共享内存和资源,单个线程崩溃可能会影响所属进程的稳定性,可靠性差   线程组   每个Thread必然存在于一个ThreadGroup....","articleStatus":0,"articlePermalink":"/articles/2022/03/13/1647154631868.html","articleImg1URL":"https://b3logfile.com/bing/20201024.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"【转载】使用 Lambda 表达式的正确姿势","articleAbstractText":"使用 Lambda 表达式的正确姿势，写的太好了叭！ 官方文档","articleStatus":0,"articlePermalink":"/articles/2021/11/18/1637220305162.html","articleImg1URL":"https://b3logfile.com/bing/20211105.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}