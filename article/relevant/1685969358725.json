{"relevantArticles":[{"articleTitle":"Spring Framework 学习笔记 - IoC 依赖注入","articleAbstractText":"依赖注入的模式和类型   自动绑定 (Autowiring)  自动绑定的限制和不足  Core Technologies (spring.io)  Setter 方法注入  构造器注入  字段注入  方法注入  接口回调注入   Aware 系列接口回调   自动模式    內建接口 说明     BeanFactoryAware 获取 IoC 容器 - BeanFactory   ApplicationContextAware 获取 Spring 应用上下文 - ApplicationContext 对象   EnvironmentAware 获取 Environment 对象   ResourceLoaderAware 获取资源加载器 对象 - ResourceLoad   BeanClassLoaderAware 获取加载当前 Bean Class 的 ClassLoader   BeanNameAware 获取当前 Bean 的名称   MessageSourceAware 获取 MessageSource 对象，用于 Spring 国际化   ApplicationEven....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969463102.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"JVM 学习笔记 - 垃圾回收器","articleAbstractText":"垃圾回收器的分类 按线程数分   串行垃圾回收器  适用于单 CPU 或者较小内存的硬件平台 在 Client 模式下的默认回收器    并行垃圾回收器  适用于多 CPU 同时执行垃圾回收，提升应用吞吐量    按工作模式分   并发式垃圾回收器  回收线程与应用程序交替工作，尽可能减少应用程序的停顿时间    独占式垃圾回收器 - STW  一旦运行，暂停用户线程，直到垃圾回收过程完全结束    按碎片处理方式分   压缩式垃圾回收器  在回收完成之后，对存活对象进行压缩整理，消除内存碎片 对象空间分配方式：指针碰撞    非压缩式垃圾回收器  无压缩整理过程 对象空间分配方式：空闲列表    按工作的内存区间分  年轻代垃圾回收器  Serial ParNew Parallel Scavenge   老年代垃圾回收器  Serial Old Parallel Old CMS   整堆垃圾回收期  G1     评估 GC 的性能指标   吞吐量：用户线程运行时间占总运行时间的比例 吞吐量 = 用户线程运行时间 / 用户线程运行时间 + 垃圾回收线程运行时间   暂停时间：执行垃圾....","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139215959.html","articleImg1URL":"https://b3logfile.com/bing/20210218.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Spring Framework 学习笔记 - IoC 依赖来源","articleAbstractText":"依赖查找的来源 查找来源  Spring 內建 BeanDefintion  Spring 內建单例对象  依赖注入的来源 注入来源  Spring 容器管理和游离对象(Resolvable Dependency)  Spring BeanDefinition 作为依赖   元数据  BeanDefinition 存储元信息    注册  BeanDefinitionRegistry#registerBeanDefinition    类型  延迟和非延迟    顺序  Bean 生命周期顺序按照注册顺序 1// Still in startup registration phase 2this.beanDefinitionMap.put(beanName, beanDefinition); 3this.beanDefinitionNames.add(beanName);  源码中,通过 Map 结构保证唯一性, List 结构保证有序性    单例对象作为依赖来源   来源  外部普通 Java 对象 (不一定是 POJO )    注册  SingletonBeanRegistry....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969400518.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Spring Framework 学习笔记 - 注解","articleAbstractText":"Spring 核心注解场景分类 Spring 模式注解    Spring 注解 场景说明 起始版本     @Repository 数据仓储模式注解 2.0   @Component 通用组件模式注解 2.5   @Service 服务模式注解 2.5   @Controller Web 控制器模式注解 2.5   @Configuration 配置类模式注解 3.0    装配注解    Spring 注解 场景说明 起始版本     @ImportResource 替换 XML 元素 2.5   @Import 导入 Configuration 类 2.5   @ComponentScan 扫描指定 package 下标注 Spring 模式注解的类 3.1     @ComponentScan 默认扫描 当前类所在的包 源码分析如下：ComponentScanAnnotationParser.parse (line:123) 1public Set&lt;BeanDefinitionHolder&gt; parse(AnnotationAttributes componentS....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685969491723.html","articleImg1URL":"https://b3logfile.com/bing/20190913.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"JVM 学习笔记 - 执行引擎","articleAbstractText":"概述 执行引擎的任务就是将字节码指令解释/编译为对应平台上的本地的机器指令  Java 编译和执行的过程 由于 JVM 同时存在解释器和即时编译器，所以 Java 是半编译半解释型语言   前端编译器 把 .java 文件编译成 .class 文件  Sun 的 javac - 全量编译 Eclipse JDT 的 ECJ - 增量式编译  解释器 - Interpreter 对字节码采用逐行解释的方式执行：将每条字节码命令 翻译 成本地机器语言指令，再执行。   字节码解释器  通过纯软件代码模拟字节码的执行,效率低下    模板解释器  将每一条字节码和一个模板函数相关联,模板函数中直接产生这条字节码执行时的机器码    即时编译器 - JIT（Just In Time Compiler） 虚拟机将字节码代码直接编译成与本地机器平台相关的机器语言 **即时编译的目的：**将整个函数体编译成机器码，每次函数执行时，只执行编译之后的机器码即可。   C1 编译器  Client 模式下的 JIT 编译器。 简单可靠的优化，耗时短    C2 编译器  Server 模式下的 JIT 编....","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139118278.html","articleImg1URL":"https://b3logfile.com/bing/20200325.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}