{"relevantArticles":[{"articleTitle":"JVM 学习笔记 - 直接内存","articleAbstractText":"概述   不是虚拟机运行时数据区的一部分，也不是 《Java 虚拟机规范》 中定义的内存区域。   直接内存是在 Java 堆外的、直接向系统申请的内存区间。  来源于 NIO ，通过 DirectByteBuffer 操作本地内存    直接内存的访问速度优于 Java 堆。（读写性能高）     不受最大堆内存参数（-Xmx）的影响，但是 Java 堆 + 直接内存 受限于操作系统能给出的最大内存    也会出现 OOM 1java.lang.OutOfMemoryError: Direct buffer memory    MaxDirectMemorySize 设置直接内存大小，不设置时默认与 \u2014Xmx 的值相同 1-XX:MaxDirectMemorySize=20m       缺点：  分配收回成本高 不受 JVM 内存回收管理  Java 进程占用的内存 = Java 堆 + 本地内存","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139087173.html","articleImg1URL":"https://b3logfile.com/bing/20200325.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"JVM 学习笔记 - 执行引擎","articleAbstractText":"概述 执行引擎的任务就是将字节码指令解释/编译为对应平台上的本地的机器指令  Java 编译和执行的过程 由于 JVM 同时存在解释器和即时编译器，所以 Java 是半编译半解释型语言   前端编译器 把 .java 文件编译成 .class 文件  Sun 的 javac - 全量编译 Eclipse JDT 的 ECJ - 增量式编译  解释器 - Interpreter 对字节码采用逐行解释的方式执行：将每条字节码命令 翻译 成本地机器语言指令，再执行。   字节码解释器  通过纯软件代码模拟字节码的执行,效率低下    模板解释器  将每一条字节码和一个模板函数相关联,模板函数中直接产生这条字节码执行时的机器码    即时编译器 - JIT（Just In Time Compiler） 虚拟机将字节码代码直接编译成与本地机器平台相关的机器语言 **即时编译的目的：**将整个函数体编译成机器码，每次函数执行时，只执行编译之后的机器码即可。   C1 编译器  Client 模式下的 JIT 编译器。 简单可靠的优化，耗时短    C2 编译器  Server 模式下的 JIT 编....","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139118278.html","articleImg1URL":"https://b3logfile.com/bing/20200325.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"JVM 学习笔记 - String","articleAbstractText":"String 基本特性   定义方式 1String s1 = \"字面量定义\"; //字符串 \"字面量定义\" String对象直接进入字符串常量池中 2String s2 = new String(\"构造器构造\");    final 修饰，不可继承   实现 Serializable、Comparable 接口，支持序列化和可以比较大小   底层结构  jdk 8：final char [] value 存储数据 jdk 9：final byte[] value 存储数据    字符串的不可变性   内存结构  1public class StringTest {  2  3 public static void main(String[] args) {  4 /*  5 对象1：new String对象  6 对象2：常量池中对象 \"abc\"，对应字节码指令 'ldc'  7 */  8 String s = new String(\"abc\");  9 10 /* 11 对象1：new StringBuilder() 12 对象2：new String()对象 13 对象3：常量....","articleStatus":0,"articlePermalink":"/articles/2023/06/07/1686139148432.html","articleImg1URL":"https://b3logfile.com/bing/20210416.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"MySQL 学习笔记 - 主从复制","articleAbstractText":"作用  读写分离  针对读多写少的需求，降低单机压力，同时减少锁表概率，从而实现更高的并发访问      数据备份 高可用  原理 Slave 从 Master 读取 binlog 实现数据同步","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685968286672.html","articleImg1URL":"https://b3logfile.com/bing/20180309.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"MySQL 学习笔记 - MVCC","articleAbstractText":"相关概念 多版本并发控制(Multiversion Concurrency Control) MVCC，多版本并发控制。通过数据行的多个版本管理来实现数据库的 并发控制。使用乐观锁保证 InnoDB 的事务隔离级别下的 一致性读。 快照读 快照读又叫一致性读，读取的是快照数据。不加锁的简单 select 语句都属于快照读  串行化 隔离级别下 快照读 会退化为当前读 （串行化之后，默认读的都是最新数据）  当前读 当前读读取的是记录的最新版本，读取时话要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。 加锁的 select，或者对数据进行增删改都会进行当前读 1select * from student lock in share mode; # S 锁 2select * from student for update; # X 锁 3insert into student values ... ; # X 锁 4update student set ... ; # X 锁 5delete from student where ... ; # X 锁  MVCC 的实现原理....","articleStatus":0,"articlePermalink":"/articles/2023/06/05/1685968433040.html","articleImg1URL":"https://b3logfile.com/bing/20180210.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}